// Copyright contributors to the IBM Security Verify Adaptive Proxy SDK
// for JavaScript project


const base64Utils = require('../utils/base64Utils');
const securityUtils = require('../utils/securityUtils');

const axios = require('axios');
const querystring = require('querystring');


/**
 * A class for making HTTP requests to OIDC.
 * @author Adam Dorogi-Kaposi <adam.dorogi-kaposi@ibm.com>
 */
class Service {
  /**
   * Create a new {@link Service} object.
   * @param {Object} auth The credentials to authenticate to Factors or OIDC.
   * Either an <code>accessToken</code>, or a <code>clientId</code> and
   * <code>clientSecret</code> may be used for authentication. If an
   * <code>accessToken</code>, set this object's
   * <code>_authorizationHeader</code> property to <code>Authorization: Bearer
   * ${accessToken}</code>. If a <code>clientId</code> and
   * <code>clientSecret</code>, Base64 encode the <code>clientId</code> and
   * <code>clientSecret</code>, and set this object's
   * <code>_authorizationHeader</code> property to <code>Authorization: Basic
   * ${Base64(clientId:clientSecret)}</code>.
   * @param {string} [auth.accessToken] The access token to authenticate to
   * Factors or OIDC.
   * @param {string} [auth.clientId] The identifier of the client to
   * authenticate to Factors or OIDC.
   * @param {string} [auth.clientSecret] The client secret to authenticate to
   * Factors or OIDC.
   * @param {string} baseURL The base URL for the API, normally the tenant URL.
   * @param {Object} context The context to send for assessment.
   * @param {string} context.sessionId The session ID generated by the
   * user-agent, using an Adaptive client SDK.
   * @param {string} context.userAgent The user-agent, typically obtained form
   * the User-Agent HTTP header.
   * @param {string} context.ipAddress The IP address of the user-agent.
   * @param {string} [contentTypeHeader='json'] The type of content to send in
   * the requests. Sets the <code>Content-Type</code> header of the requests
   * appropriately.
   * @param {string} [acceptHeader='json'] The type of content to receive in the
   * response. Sets the <code>Accept</code> header of the requests
   * appropriately.
   */
  constructor(auth, baseURL, context, contentTypeHeader='json',
      acceptHeader='json') {
    this._baseURL = baseURL;
    this._context = base64Utils.base64UrlEncodeObject(context);
    this._contentTypeHeader = contentTypeHeader;
    this._acceptHeader = acceptHeader;
    this._config = {}

    if (auth.accessToken) {
      this._authorizationHeader = `Bearer ${auth.accessToken}`;
    } else if (auth.clientId && auth.clientSecret) {
      const base64EncodedCredentials = base64Utils
          .base64UrlEncodeString(`${auth.clientId}:${auth.clientSecret}`);
      this._authorizationHeader = `Basic ${base64EncodedCredentials}`;
    }

    console.log(`[${Service.name}:constructor(auth, baseURL, context, ` +
      `contentTypeHeader='json', acceptHeader='json')]`,
    'baseURL:', this._baseURL);
    console.log(`[${Service.name}:constructor(auth, baseURL, context, ` +
      `contentTypeHeader='json', acceptHeader='json')]`,
    'context:', this._context);
    console.log(`[${Service.name}:constructor(auth, baseURL, context, ` +
      `contentTypeHeader='json', acceptHeader='json')]`,
    'contentTypeHeader:', this._contentTypeHeader);
    console.log(`[${Service.name}:constructor(auth, baseURL, context, ` +
      `contentTypeHeader='json', acceptHeader='json')]`,
    'acceptHeader:', this._acceptHeader);
    console.log(`[${Service.name}:constructor(auth, baseURL, context, ` +
      `contentTypeHeader='json', acceptHeader='json')]`,
    'authorizationHeader:', '****');
  }

  /**
   * Send a HTTP GET request.
   * @param {string} path The path on the base URL to send the request to.
   * @param {Object} params The URL parameters to be sent with the request.
   * @return {Promise<Object>} The response to the HTTP request.
   */
  async get(path, params={}) {
    const headers = {
      'Accept': `application/${this._acceptHeader}`,
      'Authorization': this._authorizationHeader,
    };

    console.log(`[${Service.name}:get(path, params={})]`,
        'path:', path);
    console.log(`[${Service.name}:get(path, params={})]`,
        'params:', securityUtils.maskObject(params));
    console.log(`[${Service.name}:get(path, params={})]`,
        'headers:', securityUtils.maskObject(headers));
    
    if(process.env.PROXY_HOST && process.env.PROXY_PORT) {
      this._config = { proxy: {
          protocol: process.env.PROXY_SECURE ? "https" : "http",
          host: process.env.PROXY_HOST,
          port: process.env.PROXY_PORT
        }
      }
    }

    this._config.params = params
    this._config.headers = headers
    
    return await axios.get(this._baseURL + path, {...this._config});
  }

  /**
   * Send a HTTP POST request.
   * @param {string} path The path on the base URL to send the request to.
   * @param {Object} data The POST body to send with the request.
   * @param {Object} params The URL parameters to send with the request.
   * @return {Promise<Object>} The response to the HTTP request.
   */
  async post(path, data={}, params={}) {
    const headers = {
      'Accept': `application/${this._acceptHeader}`,
      'Content-Type': `application/${this._contentTypeHeader}`,
      'Authorization': this._authorizationHeader,
    };

    let dataMasked = securityUtils.maskObject(data);

    if (this._contentTypeHeader === 'x-www-form-urlencoded') {
      data = querystring.stringify(data);
      dataMasked = querystring.stringify(dataMasked);
    }

    console.log(`[${Service.name}:post(path, data={}, params={})]`,
        'path:', path);
    console.log(`[${Service.name}:post(path, data={}, params={})]`,
        'data:', dataMasked);
    console.log(`[${Service.name}:post(path, data={}, params={})]`,
        'params:', securityUtils.maskObject(params));
    console.log(`[${Service.name}:post(path, data={}, params={})]`,
        'headers:', securityUtils.maskObject(headers));
      
    if(process.env.PROXY_HOST && process.env.PROXY_PORT ) {
      this._config = { proxy: {
          protocol: process.env.PROXY_SECURE ? "https" : "http",
          host: process.env.PROXY_HOST,
          port: process.env.PROXY_PORT
        }
      }
    }

    this._config.params = params
    this._config.headers = headers

    return await axios.post(this._baseURL + path, data, {...this._config});
  }
}

module.exports = Service;
